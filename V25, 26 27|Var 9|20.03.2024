{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "25 9.Класс – конус. Методы – расчет площади и объема конуса. Поля – радиус основания, высота конуса."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "fd7fe1f6cae5b13c"
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Площадь конуса: 254.160184615763\n",
      "Объем конуса: 261.79938779914943\n"
     ]
    }
   ],
   "source": [
    "from math import pi\n",
    "\n",
    "class conus(object):\n",
    "    def __init__(self, r, h):\n",
    "        self.r = r\n",
    "        self.h = h\n",
    "    \n",
    "    def S(self):\n",
    "        l = (self.r**2 + self.h**2) ** 0.5  #образующая\n",
    "        return pi * (self.r ** 2) + pi * self.r * l\n",
    "    \n",
    "    def V(self):\n",
    "        return pi * (self.r ** 2) * self.h * (1/3)\n",
    "\n",
    "c1 = conus(5, 10)\n",
    "print(\"Площадь конуса:\", c1.S())\n",
    "print(\"Объем конуса:\", c1.V())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-20T09:13:53.281660Z",
     "start_time": "2024-03-20T09:13:53.266640Z"
    }
   },
   "id": "88c6f0542ab555df"
  },
  {
   "cell_type": "markdown",
   "source": [
    "26.9. Опишите класс Triangle, заданный длиной одной стороны и двумя прилежащими углами (в градусах). Включите в описание класса методы, позволяющие вычислить две другие стороны и третий угол треугольника, и свойство, доступное только для чтения, позволяющее установить вид треугольника (равносторонний, равнобедренный, прямоугольный и т. п.)."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "a0b10696119ccfdd"
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Другие стороны треугольника: 4.330127018922193 2.4999999999999996\n",
      "Третий угол треугольника: 90\n",
      "Вид треугольника: Прямоугольный\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "class Triangle:\n",
    "    def __init__(self, side, angle1, angle2):   #задаем поля\n",
    "        self.side = side\n",
    "        self.angle1 = angle1\n",
    "        self.angle2 = angle2\n",
    "    \n",
    "    @property\n",
    "    def triangle_type(self):    #Находим тип треугольника\n",
    "        if self.angle1 == self.angle2 == 60:\n",
    "            return \"Равносторонний\"\n",
    "        elif self.angle1 == self.angle2 == 90 or (self.angle1 + self.angle2) == 90:\n",
    "            return \"Прямоугольный\"\n",
    "        elif self.angle1 == self.angle2 or self.angle1 + self.angle2 == 180 - (self.angle1 + self.angle2):\n",
    "            return \"Равнобедренный\"\n",
    "        else:\n",
    "            return \"Общего вида\"\n",
    "\n",
    "    def calculate_other_sides(self):    #Вычисляем третий угол и стороны\n",
    "        angle3 = 180 - (self.angle1 + self.angle2)\n",
    "        side2 = self.side * math.sin(math.radians(self.angle2)) / math.sin(math.radians(angle3))    #По теореме синусов\n",
    "        side3 = self.side * math.sin(math.radians(self.angle1)) / math.sin(math.radians(angle3))\n",
    "        \n",
    "        return side2, side3, angle3\n",
    "\n",
    "# Пример использования класса Triangle\n",
    "t = Triangle(5, 30, 60)\n",
    "side2, side3, angle3 = t.calculate_other_sides()\n",
    "triangle_type = t.triangle_type\n",
    "\n",
    "print(\"Другие стороны треугольника:\", side2, side3)\n",
    "print(\"Третий угол треугольника:\", angle3)\n",
    "print(\"Вид треугольника:\", triangle_type)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-19T22:26:43.419933400Z",
     "start_time": "2024-03-19T22:26:43.354147600Z"
    }
   },
   "id": "52977f9c9c28554a"
  },
  {
   "cell_type": "markdown",
   "source": [
    "27.9\n",
    "Создайте класс ТРАНСПОРТ с методами, позволяющими вывести на экран информацию о транспортном средстве, а также определить, находится ли транспортное средство в пределах заданных координат. Создайте дочерние классы САМОЛЕТ (марка, максимальные скорость и высота, количество пассажиров, координаты), АВТОМОБИЛЬ (марка, номер, год выпуска, координаты), КОРАБЛЬ (название, координаты, скорость, количество пассажиров, порт приписки) со своими методами вывода информации на экран и определения присутствия транспортного средства в пределах заданных координат. Создайте список из  n  транспортных средств, выведите полную информацию из базы на экран, а также организуйте поиск транспортных средств, которые сейчас находятся в пределах заданных координат."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "b0915011afd0eda8"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Транспортное средство: Boeing\n",
      "Координаты: (50.0, 30.0)\n",
      "Максимальная скорость: 900\n",
      "Максимальная высота: 12000\n",
      "Количество пассажиров: 200\n",
      "\n",
      "Транспортное средство: Toyota\n",
      "Координаты: (40.0, 20.0)\n",
      "Номер: X123YZ\n",
      "Год выпуска: 2018\n",
      "\n",
      "Транспортное средство: Titanic\n",
      "Координаты: (10.0, 5.0)\n",
      "Скорость: 25\n",
      "Количество пассажиров: 3000\n",
      "Порт приписки: Southampton\n",
      "\n",
      "Транспорт Boeing находится в пределах заданных координат.\n"
     ]
    }
   ],
   "source": [
    "class Transport:\n",
    "    def __init__(self, brand, coordinates):\n",
    "        self.brand = brand\n",
    "        self.coordinates = coordinates\n",
    "    \n",
    "    def display_info(self):\n",
    "        print(\"Транспортное средство:\", self.brand)\n",
    "        print(\"Координаты:\", self.coordinates)\n",
    "    \n",
    "    def check_location(self, x, y):\n",
    "        if self.coordinates == (x, y):\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "\n",
    "class Airplane(Transport):\n",
    "    def __init__(self, brand, max_speed, max_height, passengers, coordinates):\n",
    "        super().__init__(brand, coordinates)\n",
    "        self.max_speed = max_speed\n",
    "        self.max_height = max_height\n",
    "        self.passengers = passengers\n",
    "    \n",
    "    def display_info(self):\n",
    "        super().display_info()\n",
    "        print(\"Максимальная скорость:\", self.max_speed)\n",
    "        print(\"Максимальная высота:\", self.max_height)\n",
    "        print(\"Количество пассажиров:\", self.passengers)\n",
    "\n",
    "class Car(Transport):\n",
    "    def __init__(self, brand, number, year, coordinates):\n",
    "        super().__init__(brand, coordinates)\n",
    "        self.number = number\n",
    "        self.year = year\n",
    "    \n",
    "    def display_info(self):\n",
    "        super().display_info()\n",
    "        print(\"Номер:\", self.number)\n",
    "        print(\"Год выпуска:\", self.year)\n",
    "\n",
    "class Ship(Transport):\n",
    "    def __init__(self, brand, speed, passengers, home_port, coordinates):\n",
    "        super().__init__(brand, coordinates)\n",
    "        self.speed = speed\n",
    "        self.passengers = passengers\n",
    "        self.home_port = home_port\n",
    "    \n",
    "    def display_info(self):\n",
    "        super().display_info()\n",
    "        print(\"Скорость:\", self.speed)\n",
    "        print(\"Количество пассажиров:\", self.passengers)\n",
    "        print(\"Порт приписки:\", self.home_port)\n",
    "\n",
    "\n",
    "transport_list = [\n",
    "    Airplane(\"Boeing\", 900, 12000, 200, (50.0, 30.0)),\n",
    "    Car(\"Toyota\", \"X123YZ\", 2018, (40.0, 20.0)),\n",
    "    Ship(\"Titanic\", 25, 3000, \"Southampton\", (10.0, 5.0))\n",
    "]\n",
    "\n",
    "for transport in transport_list:\n",
    "    transport.display_info()\n",
    "    print()\n",
    "\n",
    "# Поиск транспортных средств в пределах заданных координат\n",
    "target_x = 50.0\n",
    "target_y = 30.0\n",
    "\n",
    "for transport in transport_list:\n",
    "    if transport.check_location(target_x, target_y):\n",
    "        print(f\"Транспорт {transport.brand} находится в пределах заданных координат.\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-20T09:22:52.377383Z",
     "start_time": "2024-03-20T09:22:52.365237Z"
    }
   },
   "id": "50430eea75f008a3"
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   },
   "id": "2382f69eb5420e3d"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
